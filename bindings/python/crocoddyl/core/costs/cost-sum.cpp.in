///////////////////////////////////////////////////////////////////////////////
// BSD 3-Clause License
//
// Copyright (C) 2019-2025, LAAS-CNRS, University of Edinburgh,
//                          Heriot-Watt University
// Copyright note valid unless otherwise stated in individual files.
// All rights reserved.
///////////////////////////////////////////////////////////////////////////////

// Auto-generated file for @SCALAR_TYPE@
#include "crocoddyl/core/costs/cost-sum.hpp"

#include "python/crocoddyl/core/action-base.hpp"
#include "python/crocoddyl/core/core.hpp"
#include "python/crocoddyl/core/diff-action-base.hpp"
#include "python/crocoddyl/utils/deprecate.hpp"
#include "python/crocoddyl/utils/map-converter.hpp"

namespace crocoddyl {
namespace python {

template <typename Model>
struct CostItemVisitor : public bp::def_visitor<CostItemVisitor<Model>> {
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.def_readwrite("name", &Model::name, "cost name")
        .add_property(
            "cost",
            bp::make_getter(&Model::cost,
                            bp::return_value_policy<bp::return_by_value>()),
            "cost model")
        .def_readwrite("weight", &Model::weight, "cost weight")
        .def_readwrite("active", &Model::active, "cost status");
  }
};

template <typename Model>
struct CostModelSumVisitor
    : public bp::def_visitor<CostModelSumVisitor<Model>> {
  BOOST_PYTHON_MEMBER_FUNCTION_OVERLOADS(CostModelSum_addCost_wrap,
                                         Model::addCost, 3, 4)
  typedef typename Model::Scalar Scalar;
  typedef typename Model::CostDataSum Data;
  typedef typename Model::CostItem CostItem;
  typedef typename Model::CostModelAbstract CostModelAbstract;
  typedef typename Model::StateAbstract State;
  typedef typename Model::VectorXs VectorXs;
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.def("addCost", static_cast<void (Model::*)(const std::string&, std::shared_ptr<CostModelAbstract>, const Scalar, const bool)>(&Model::addCost),
             CostModelSum_addCost_wrap(
                 bp::args("self", "name", "cost", "weight", "active"),
                 "Add a cost item.\n\n"
                 ":param name: cost name\n"
                 ":param cost: cost model\n"
                 ":param weight: cost weight\n"
                 ":param active: True if the cost is activated (default true)"))
        .def("addCost",
                    static_cast<void (Model::*)(
                        const std::shared_ptr<CostItem>&)>(&Model::addCost),
                    bp::args("self", "cost_item"),
                    "Add a cost item.\n\n"
                    ":param cost_item: cost item")
        .def("removeCost", &Model::removeCost, bp::args("self", "name"),
             "Remove a cost item.\n\n"
             ":param name: cost name")
        .def("changeCostStatus", &Model::changeCostStatus,
             bp::args("self", "name", "active"),
             "Change the cost status.\n\n"
             ":param name: cost name\n"
             ":param active: cost status (true for active and false for "
             "inactive)")
        .def(
            "calc",
            static_cast<void (Model::*)(
                const std::shared_ptr<Data>&, const Eigen::Ref<const VectorXs>&,
                const Eigen::Ref<const VectorXs>&)>(&Model::calc),
            bp::args("self", "data", "x", "u"),
            "Compute the total cost.\n\n"
            ":param data: cost-sum data\n"
            ":param x: state point (dim. state.nx)\n"
            ":param u: control input (dim. nu)")
        .def(
            "calc",
            static_cast<void (Model::*)(const std::shared_ptr<Data>&,
                                        const Eigen::Ref<const VectorXs>&)>(
                &Model::calc),
            bp::args("self", "data", "x"),
            "Compute the total cost value for nodes that depends only on the "
            "state.\n\n"
            "It updates the total cost based on the state only.\n"
            "This function is used in the terminal nodes of an optimal control "
            "problem.\n"
            ":param data: cost-sum data\n"
            ":param x: state point (dim. state.nx)")
        .def(
            "calcDiff",
            static_cast<void (Model::*)(
                const std::shared_ptr<Data>&, const Eigen::Ref<const VectorXs>&,
                const Eigen::Ref<const VectorXs>&)>(&Model::calcDiff),
            bp::args("self", "data", "x", "u"),
            "Compute the derivatives of the total cost.\n\n"
            "It assumes that calc has been run first.\n"
            ":param data: action data\n"
            ":param x: state point (dim. state.nx)\n"
            ":param u: control input (dim. nu)")
        .def(
            "calcDiff",
            static_cast<void (Model::*)(const std::shared_ptr<Data>&,
                                        const Eigen::Ref<const VectorXs>&)>(
                &Model::calcDiff),
            bp::args("self", "data", "x"),
            "Compute the Jacobian and Hessian of the total cost for nodes that "
            "depends on the state only.\n\n"
            "It updates the Jacobian and Hessian of the total cost based on "
            "the "
            "state only.\n"
            "This function is used in the terminal nodes of an optimal control "
            "problem.\n"
            ":param data: cost-sum data\n"
            ":param x: state point (dim. state.nx)")
        .def("createData", &Model::createData,
             bp::with_custodian_and_ward_postcall<0, 2>(),
             bp::args("self", "data"),
             "Create the total cost data.\n\n"
             ":param data: shared data\n"
             ":return total cost data.")
        .add_property(
            "state",
            bp::make_function(&Model::get_state,
                              bp::return_value_policy<bp::return_by_value>()),
            "state description")
        .add_property(
            "costs",
            bp::make_function(&Model::get_costs,
                              bp::return_value_policy<bp::return_by_value>()),
            "stack of costs")
        .add_property("nu", bp::make_function(&Model::get_nu),
                      "dimension of control vector")
        .add_property("nr", bp::make_function(&Model::get_nr),
                      "dimension of the residual vector of active cost")
        .add_property("nr_total", bp::make_function(&Model::get_nr_total),
                      "dimension of the total residual vector")
        .add_property(
            "active",
            bp::make_function(
                &Model::get_active,
                deprecated<bp::return_value_policy<bp::return_by_value>>(
                    "Deprecated. Use property active_set")),
            "list of names of active contact items")
        .add_property(
            "inactive",
            bp::make_function(
                &Model::get_inactive,
                deprecated<bp::return_value_policy<bp::return_by_value>>(
                    "Deprecated. Use property inactive_set")),
            "list of names of inactive contact items")
        .add_property(
            "active_set",
            bp::make_function(&Model::get_active_set,
                              bp::return_value_policy<bp::return_by_value>()),
            "name of the active set of cost items")
        .add_property(
            "inactive_set",
            bp::make_function(&Model::get_inactive_set,
                              bp::return_value_policy<bp::return_by_value>()),
            "name of the inactive set of cost items")
        .def("getCostStatus", &Model::getCostStatus, bp::args("self", "name"),
             "Return the cost status of a given cost name.\n\n"
             ":param name: cost name");
  }
};

template <typename Data>
struct CostDataSumVisitor : public bp::def_visitor<CostDataSumVisitor<Data>> {
  typedef typename Data::Scalar Scalar;
  typedef DifferentialActionDataAbstractTpl<Scalar> DifferentialActionData;
  typedef ActionDataAbstractTpl<Scalar> ActionData;
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.def(
          "shareMemory", &Data::template shareMemory<DifferentialActionData>,
          bp::args("self", "model"),
          "Share memory with a given differential action data\n\n"
          ":param model: differential action data that we want to share memory")
        .def("shareMemory", &Data::template shareMemory<ActionData>,
             bp::args("self", "model"),
             "Share memory with a given action data\n\n"
             ":param model: action data that we want to share memory")
        .add_property(
            "costs",
            bp::make_getter(&Data::costs,
                            bp::return_value_policy<bp::return_by_value>()),
            "stack of costs data")
        .add_property(
            "shared",
            bp::make_getter(&Data::shared, bp::return_internal_reference<>()),
            "shared data")
        .add_property(
            "cost",
            bp::make_getter(&Data::cost,
                            bp::return_value_policy<bp::return_by_value>()),
            bp::make_setter(&Data::cost), "cost value")
        .add_property(
            "Lx",
            bp::make_function(&Data::get_Lx,
                              bp::return_value_policy<bp::return_by_value>()),
            bp::make_function(&Data::set_Lx), "Jacobian of the cost")
        .add_property(
            "Lu",
            bp::make_function(&Data::get_Lu,
                              bp::return_value_policy<bp::return_by_value>()),
            bp::make_function(&Data::set_Lu), "Jacobian of the cost")
        .add_property(
            "Lxx",
            bp::make_function(&Data::get_Lxx,
                              bp::return_value_policy<bp::return_by_value>()),
            bp::make_function(&Data::set_Lxx), "Hessian of the cost")
        .add_property(
            "Lxu",
            bp::make_function(&Data::get_Lxu,
                              bp::return_value_policy<bp::return_by_value>()),
            bp::make_function(&Data::set_Lxu), "Hessian of the cost")
        .add_property(
            "Luu",
            bp::make_function(&Data::get_Luu,
                              bp::return_value_policy<bp::return_by_value>()),
            bp::make_function(&Data::set_Luu), "Hessian of the cost");
  }
};

#define CROCODDYL_COST_ITEM_PYTHON_BINDINGS(Scalar)                       \
  typedef CostItemTpl<Scalar> Item;                                      \
  typedef Item::CostModelAbstract CostModel;                             \
  typedef std::shared_ptr<Item> CostItemPtr;                             \
  StdMapPythonVisitor<                                                    \
      std::string, CostItemPtr, std::less<std::string>,                   \
      std::allocator<std::pair<const std::string, CostItemPtr>>,          \
      true>::expose("StdMap_CostItem");                                   \
  typedef CostDataAbstractTpl<Scalar> CostData;                           \
  typedef std::shared_ptr<CostData> CostDataPtr;                          \
  StdMapPythonVisitor<                                                    \
      std::string, CostDataPtr, std::less<std::string>,                   \
      std::allocator<std::pair<const std::string, CostDataPtr>>,          \
      true>::expose("StdMap_CostData");                                   \
  bp::register_ptr_to_python<std::shared_ptr<Item>>();                   \
  bp::class_<Item>(                                                      \
      "CostItem", "Describe a cost item.\n\n",                            \
      bp::init<std::string, std::shared_ptr<CostModel>, Scalar,           \
               bp::optional<bool>>(                                       \
          bp::args("self", "name", "cost", "weight", "active"),           \
          "Initialize the cost item.\n\n"                                 \
          ":param name: cost name\n"                                      \
          ":param cost: cost model\n"                                     \
          ":param weight: cost weight\n"                                  \
          ":param active: True if the cost is activated (default true)")) \
      .def(CostItemVisitor<Item>())                                      \
      .def(CastVisitor<Item>())                                          \
      .def(PrintableVisitor<Item>())                                     \
      .def(CopyableVisitor<Item>());

#define CROCODDYL_COST_MODEL_SUM_PYTHON_BINDINGS(Scalar)           \
  typedef CostModelSumTpl<Scalar> Model;                           \
  typedef Model::StateAbstract State;                              \
  bp::register_ptr_to_python<std::shared_ptr<Model>>();            \
  bp::class_<Model>("CostModelSum",                                \
                    bp::init<std::shared_ptr<State>, bp::optional<std::size_t>>( \
                        bp::args("self", "state", "nu"),           \
                        "Initialize the total cost model.\n\n"     \
                        ":param state: state description\n"        \
                        ":param nu: dimension of control vector")) \
      .def(CostModelSumVisitor<Model>())                           \
      .def(CastVisitor<Model>())                                   \
      .def(PrintableVisitor<Model>())                              \
      .def(CopyableVisitor<Model>());

#define CROCODDYL_COST_DATA_SUM_PYTHON_BINDINGS(Scalar)                     \
  typedef CostDataSumTpl<Scalar> Data;                                      \
  typedef CostModelSumTpl<Scalar> Model;                                    \
  typedef Model::DataCollectorAbstract DataCollector;                       \
  bp::register_ptr_to_python<std::shared_ptr<Data>>();                      \
  bp::class_<Data>(                                                         \
      "CostDataSum", "Class for total cost data.\n\n",                      \
      bp::init<Model*, DataCollector*>(                                     \
          bp::args("self", "model", "data"),                                \
          "Create total cost data.\n\n"                                     \
          ":param model: total cost model\n"                                \
          ":param data: shared data")[bp::with_custodian_and_ward<1, 3>()]) \
      .def(CostDataSumVisitor<Data>())                                      \
      .def(CopyableVisitor<Data>());

void exposeCostSum() {
  CROCODDYL_COST_ITEM_PYTHON_BINDINGS(@SCALAR_TYPE@)
  CROCODDYL_COST_MODEL_SUM_PYTHON_BINDINGS(@SCALAR_TYPE@)
  CROCODDYL_COST_DATA_SUM_PYTHON_BINDINGS(@SCALAR_TYPE@)
}

}  // namespace python
}  // namespace crocoddyl
